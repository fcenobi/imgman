// generated by dbgen ; DO NOT EDIT

package main

import (
	"time"
)

//
// user DBObject generator
//
func (o user) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// user DBObject interface functions
//
func (o *user) InsertValues() []interface{} {
	return []interface{}{o.First, o.Last, o.Email, o.APIKey, o.Level, o.Login}
}

func (o *user) UpdateValues() []interface{} {
	return []interface{}{o.First, o.Last, o.Email, o.APIKey, o.Level, o.Login, o.USR}
}

func (o *user) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.First, &o.Last, &o.Email, &o.APIKey, &o.Level, &o.Login}
}

func (o *user) Key() int64 {
	return o.USR
}

func (o *user) SetID(id int64) {
	o.USR = id
}

func (o *user) TableName() string {
	return "users"
}

func (o *user) SelectFields() string {
	return "usr,firstname,lastname,email,apikey,admin,login"
}

func (o *user) InsertFields() string {
	return "usr,firstname,lastname,email,apikey,admin,login"
}

func (o *user) KeyField() string {
	return "usr"
}

func (o *user) KeyName() string {
	return "USR"
}

func (o *user) Names() []string {
	return []string{"First", "Last", "Email", "APIKey", "Level", "Login"}
}

func (o *user) ModifiedBy(user int64, t time.Time) {
}

//
// fullUser DBObject generator
//
func (o fullUser) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// fullUser DBObject interface functions
//
func (o *fullUser) InsertValues() []interface{} {
	return []interface{}{o.Password, o.Salt, o.Level, o.Login, o.First, o.Last, o.Email, o.APIKey}
}

func (o *fullUser) UpdateValues() []interface{} {
	return []interface{}{o.Password, o.Salt, o.Level, o.Login, o.First, o.Last, o.Email, o.APIKey, o.USR}
}

func (o *fullUser) MemberPointers() []interface{} {
	return []interface{}{&o.USR, &o.Password, &o.Salt, &o.Level, &o.Login, &o.First, &o.Last, &o.Email, &o.APIKey}
}

func (o *fullUser) Key() int64 {
	return o.USR
}

func (o *fullUser) SetID(id int64) {
	o.USR = id
}

func (o *fullUser) TableName() string {
	return "users"
}

func (o *fullUser) SelectFields() string {
	return "usr,pw_hash,pw_salt,admin,login,firstname,lastname,email,apikey"
}

func (o *fullUser) InsertFields() string {
	return "usr,pw_hash,pw_salt,admin,login,firstname,lastname,email,apikey"
}

func (o *fullUser) KeyField() string {
	return "usr"
}

func (o *fullUser) KeyName() string {
	return "USR"
}

func (o *fullUser) Names() []string {
	return []string{"Password", "Salt", "Level", "Login", "First", "Last", "Email", "APIKey"}
}

func (o *fullUser) ModifiedBy(user int64, t time.Time) {
}

//
// site DBObject generator
//
func (o site) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// site DBObject interface functions
//
func (o *site) InsertValues() []interface{} {
	return []interface{}{o.Modified, o.City, o.State, o.Country, o.Web, o.USR, o.Name, o.Address, o.Postal, o.Phone}
}

func (o *site) UpdateValues() []interface{} {
	return []interface{}{o.Modified, o.City, o.State, o.Country, o.Web, o.USR, o.Name, o.Address, o.Postal, o.Phone, o.STI}
}

func (o *site) MemberPointers() []interface{} {
	return []interface{}{&o.STI, &o.Modified, &o.City, &o.State, &o.Country, &o.Web, &o.USR, &o.Name, &o.Address, &o.Postal, &o.Phone}
}

func (o *site) Key() int64 {
	return o.STI
}

func (o *site) SetID(id int64) {
	o.STI = id
}

func (o *site) TableName() string {
	return "sites"
}

func (o *site) SelectFields() string {
	return "sti,ts,city,state,country,web,usr,name,address,postal,phone"
}

func (o *site) InsertFields() string {
	return "sti,ts,city,state,country,web,usr,name,address,postal,phone"
}

func (o *site) KeyField() string {
	return "sti"
}

func (o *site) KeyName() string {
	return "STI"
}

func (o *site) Names() []string {
	return []string{"Modified", "City", "State", "Country", "Web", "USR", "Name", "Address", "Postal", "Phone"}
}

func (o *site) ModifiedBy(user int64, t time.Time) {
	o.USR = &user
	o.Modified = t
}

//
// pxeDevice DBObject generator
//
func (o pxeDevice) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// pxeDevice DBObject interface functions
//
func (o *pxeDevice) InsertValues() []interface{} {
	return []interface{}{o.Profile, o.IPMI, o.Note, o.STI, o.RID, o.Site, o.Rack, o.RU, o.Hostname, o.MAC, o.IP}
}

func (o *pxeDevice) UpdateValues() []interface{} {
	return []interface{}{o.Profile, o.IPMI, o.Note, o.STI, o.RID, o.Site, o.Rack, o.RU, o.Hostname, o.MAC, o.IP, o.DID}
}

func (o *pxeDevice) MemberPointers() []interface{} {
	return []interface{}{&o.DID, &o.Profile, &o.IPMI, &o.Note, &o.STI, &o.RID, &o.Site, &o.Rack, &o.RU, &o.Hostname, &o.MAC, &o.IP}
}

func (o *pxeDevice) Key() int64 {
	return o.DID
}

func (o *pxeDevice) SetID(id int64) {
	o.DID = id
}

func (o *pxeDevice) TableName() string {
	return "pxedevice"
}

func (o *pxeDevice) SelectFields() string {
	return "did,profile,ipmi,note,sti,rid,site,rack,ru,hostname,mac,ip"
}

func (o *pxeDevice) InsertFields() string {
	return "did,profile,ipmi,note,sti,rid,site,rack,ru,hostname,mac,ip"
}

func (o *pxeDevice) KeyField() string {
	return "did"
}

func (o *pxeDevice) KeyName() string {
	return "DID"
}

func (o *pxeDevice) Names() []string {
	return []string{"Profile", "IPMI", "Note", "STI", "RID", "Site", "Rack", "RU", "Hostname", "MAC", "IP"}
}

func (o *pxeDevice) ModifiedBy(user int64, t time.Time) {
}

//
// audit DBObject generator
//
func (o audit) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// audit DBObject interface functions
//
func (o *audit) InsertValues() []interface{} {
	return []interface{}{o.TS, o.USR, o.STI, o.Site, o.Hostname, o.Log, o.User}
}

func (o *audit) UpdateValues() []interface{} {
	return []interface{}{o.TS, o.USR, o.STI, o.Site, o.Hostname, o.Log, o.User, o.AID}
}

func (o *audit) MemberPointers() []interface{} {
	return []interface{}{&o.AID, &o.TS, &o.USR, &o.STI, &o.Site, &o.Hostname, &o.Log, &o.User}
}

func (o *audit) Key() int64 {
	return o.AID
}

func (o *audit) SetID(id int64) {
	o.AID = id
}

func (o *audit) TableName() string {
	return "audit_view"
}

func (o *audit) SelectFields() string {
	return "aid,ts,usr,sti,site,hostname,log,user"
}

func (o *audit) InsertFields() string {
	return "aid,ts,usr,sti,site,hostname,log,user"
}

func (o *audit) KeyField() string {
	return "aid"
}

func (o *audit) KeyName() string {
	return "AID"
}

func (o *audit) Names() []string {
	return []string{"TS", "USR", "STI", "Site", "Hostname", "Log", "User"}
}

func (o *audit) ModifiedBy(user int64, t time.Time) {
	o.TS = t
}

//
// pxeHost DBObject generator
//
func (o pxeHost) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// pxeHost DBObject interface functions
//
func (o *pxeHost) InsertValues() []interface{} {
	return []interface{}{o.Sitename, o.Hostname}
}

func (o *pxeHost) UpdateValues() []interface{} {
	return []interface{}{o.Sitename, o.Hostname, o.ID}
}

func (o *pxeHost) MemberPointers() []interface{} {
	return []interface{}{&o.ID, &o.Sitename, &o.Hostname}
}

func (o *pxeHost) Key() int64 {
	return o.ID
}

func (o *pxeHost) SetID(id int64) {
	o.ID = id
}

func (o *pxeHost) TableName() string {
	return "pxehosts"
}

func (o *pxeHost) SelectFields() string {
	return "id,sitename,hostname"
}

func (o *pxeHost) InsertFields() string {
	return "id,sitename,hostname"
}

func (o *pxeHost) KeyField() string {
	return "id"
}

func (o *pxeHost) KeyName() string {
	return "ID"
}

func (o *pxeHost) Names() []string {
	return []string{"Sitename", "Hostname"}
}

func (o *pxeHost) ModifiedBy(user int64, t time.Time) {
}

//
// event DBObject generator
//
func (o event) NewObj() interface{} {
	ditto := o
	return &ditto
}

//
// event DBObject interface functions
//
func (o *event) InsertValues() []interface{} {
	return []interface{}{o.TS, o.Host, o.Kind, o.Msg}
}

func (o *event) UpdateValues() []interface{} {
	return []interface{}{o.TS, o.Host, o.Kind, o.Msg}
}

func (o *event) MemberPointers() []interface{} {
	return []interface{}{&o.TS, &o.Host, &o.Kind, &o.Msg}
}

func (o *event) Key() int64 {
	return 0
}

func (o *event) SetID(id int64) {
}

func (o *event) TableName() string {
	return "pxehosts"
}

func (o *event) SelectFields() string {
	return "ts,host,kind,msg"
}

func (o *event) InsertFields() string {
	return "ts,host,kind,msg"
}

func (o *event) KeyField() string {
	return ""
}

func (o *event) KeyName() string {
	return ""
}

func (o *event) Names() []string {
	return []string{"TS", "Host", "Kind", "Msg"}
}

func (o *event) ModifiedBy(user int64, t time.Time) {
}
